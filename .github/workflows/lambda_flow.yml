name: lambda_flow

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      python_version:
        type: string
        required: true
        default: "3.11"
      app_path:
        description: "The app to test"
        type: string
        required: true
      app_path_prefix:
        description: "The path to the app"
        type: string
        required: true
      compose_path:
        description: "The path to the docker-compose files"
        type: string
        required: true
      need_compose:
        description: "The services that need to be started"
        type: string
        required: true
      aws_role_arn:
        description: "The role to assume"
        type: string
        required: true
      codeartifact_domain:
        description: "The codeartifact domain"
        type: string
        required: true
      codeartifact_domain_owner:
        description: "The codeartifact domain owner"
        type: string
        required: true
      codeartifact_repository:
        description: "The codeartifact repository"
        type: string
        required: true
      tox_path:
        description: "The path to the tox files"
        type: string
        required: true
      aws_region:
        description: "The region to use"
        type: string
        required: true
      artifact_bucket:
        description: "The bucket to store the artifacts"
        type: string
        required: true

env:
  AWS_REGION: "us-west-2"

# Permission can be added at job level or workflow level
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
  actions: read # This is required for actions/checkout

jobs:
  test:
    uses: ./.github/workflows/lambda_pytest.yml
    with:
      python_version: ${{ inputs.python_version }}
      app_path: ${{ inputs.app_path }}
      app_path_prefix: ${{ inputs.app_path_prefix }}
      compose_path: ${{ inputs.compose_path }}
      need_compose: ${{ inputs.need_compose }}
      aws_role_arn: ${{ inputs.aws_role_arn }}
      codeartifact_domain: ${{ inputs.codeartifact_domain }}
      codeartifact_domain_owner: ${{ inputs.codeartifact_domain_owner }}
      codeartifact_repository: ${{ inputs.codeartifact_repository }}
      tox_path: ${{ inputs.tox_path }}
      aws_region: ${{ inputs.aws_region }}

  set_environment:
    runs-on: ubuntu-latest
    outputs:
      deploy_environment: ${{ steps.set_environment.outputs.deploy_environment }}
    steps:
      - name: Set environment variable
        id: set_environment
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # If the PR is a draft, deploy to the default environment, otherwise deploy to the qa environment
            if [ ${{ github.event.pull_request.draft }} = true ]; then
              deploy_environment=default
            else
              deploy_environment=qa
            fi
          # If the PR is merged, deploy to the prod environment
          elif  [ "${{ github.event_name }}" != "pull_request"  ]; then
            deploy_environment=prod
          fi
          echo "deploy_environment:$deploy_environment"
          echo "deploy_environment=$deploy_environment" >> $GITHUB_OUTPUT
  deploy:
    needs:
      - test
      - set_environment
    uses: ./.github/workflows/lambda_deploy.yml
    with:
      environment: ${{ needs.set_environment.outputs.deploy_environment }}
      app_path: ${{ inputs.app_path }}
      app_path_prefix: ${{ inputs.app_path_prefix }}
      artifact_bucket: ${{ inputs.artifact_bucket }}
      compose_path: ${{ inputs.compose_path }}
      aws_role_arn: "${{ inputs.aws_role_arn }}"
      codeartifact_domain: ${{ inputs.codeartifact_domain }}
      codeartifact_domain_owner: ${{ inputs.codeartifact_domain_owner }}
      codeartifact_repository: ${{ inputs.codeartifact_repository }}
      tox_path: ${{ inputs.tox_path }}
      aws_region: ${{ inputs.aws_region }}
